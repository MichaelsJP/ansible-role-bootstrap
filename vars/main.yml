---
# vars file for bootstrap
_bootstrap_packages:
  Alpine: python3 sudo git
  Archlinux: python sudo git
  Debian: python3 sudo gnupg python3-apt git curl htop nload openssh-server vim gpg python3-setuptools python3-pip python3-setuptools cron dnsutils build-essential
  Ubuntu: python-apt python3 sudo gnupg python3-apt git curl htop nload openssh-server vim gnupg python3-setuptools python3-pip python-setuptools cron dnsutils build-essential python3-dev python3-wheel python-pip-whl
  Gentoo: python sudo gentoolkit git
  RedHat: python3 sudo git
  Suse: python3 python3-xml sudo git
  Amazon: python sudo git
  CentOS_7: python sudo git python3-setuptools python-setuptools python3 python3-devel
  CentOS: python sudo git python3-setuptools python-setuptools python3 python3-devel
  Debian_9: python-apt python3 sudo gnupg python3-apt git curl htop nload openssh-server vim gpg python3-setuptools python3-pip python-setuptools python-pip cron dnsutils build-essential
  Debian_10: python3 sudo gnupg python3-apt git curl htop nload openssh-server vim gpg python3-setuptools python3-pip python3-setuptools cron dnsutils build-essential
  Debian_11: python3 sudo gnupg python3-apt git curl htop nload openssh-server vim gpg python3-setuptools python3-pip python3-setuptools cron dnsutils build-essential
  RedHat_7: python sudo git

_bootstrap_pip_packages: setuptools

bootstrap_package_cache:
  Debian:
    raw: "LANG=C DEBIAN_FRONTEND=noninteractive apt update"
    stdout_regex: 'Apt cache updated'

_bootstrap_install:
  Alpine:
    raw: "LANG=C apk update ; apk add {{ bootstrap_packages }}"
    stdout_regex: 'Installing'
  Archlinux:
    raw: "LANG=C pacman -Sy --noconfirm {{ bootstrap_packages }}"
    stdout_regex: ' installing python'
  Debian:
    raw: "LANG=C DEBIAN_FRONTEND=noninteractive apt update && LANG=C DEBIAN_FRONTEND=noninteractive apt install -y {{ bootstrap_packages }}"
    stdout_regex: ' 0 newly installed'
  Gentoo:
    raw: "LANG=C equery l {{ bootstrap_packages }} ||
          (emaint -a sync ; emerge -qkv {{ bootstrap_packages }} ; echo 'changed')"
    stdout_regex: 'changed'
  RedHat:
    raw: "LANG=C yum -y install {{ bootstrap_packages }}"
    stdout_regex: 'Nothing'
  CentOS:
    raw: "LANG=C yum -y install {{ bootstrap_packages }}"
    stdout_regex: 'Nothing'
  Suse:
    raw: "LANG=C zypper -n install {{ bootstrap_packages }}"
    stdout_regex: 'Nothing'

# See URL for available OS families and search queries
# https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/facts/system/distribution.py
bootstrap_os_family_map:
  Alpine: [ Alpine ]
  Archlinux: [ Archlinux, An
                            tergos, Manjaro ]
  Debian: [ Debian, Ubuntu, Raspbian, Neon, KDE neon,
            Linux Mint, SteamOS, Devuan, Kali, 'Cumulus Linux' ]
  Gentoo: [ Gentoo, Funtoo ]
  CentOS: [ CentOS ]
  RedHat: [ RedHat, Fedora, Scientific, SLC,
            Ascendos, CloudLinux, PSBM, OracleLinux, OVS,
            OEL, Amazon, Virtuozzo, XenServer, Alibaba, RockyLinux ]
  Suse: [ SLED, 'openSUSE Tumbleweed', 'openSUSE Leap',
          SLES_SAP, SUSE_LINUX, SLES, openSUSE, SuSE ]

bootstrap_search:
  Archlinux: 'Arch Linux'
  OracleLinux: 'Oracle Linux'
  RedHat: 'Red Hat'
  RockyLinux: 'Rocky Linux'

# Map the right set of packages, based on gathered bootstrap facts.
bootstrap_packages: "{{ _bootstrap_packages[bootstrap_distribution ~'_'~ bootstrap_distribution_major_version]|default(
                     _bootstrap_packages[bootstrap_distribution])|default(
                     _bootstrap_packages[bootstrap_os_family]) }}"

# Map the right install command, based on gathered bootstrap facts.
bootstrap_update_package_cache: "{{ bootstrap_package_cache[bootstrap_distribution ~'_'~ bootstrap_distribution_major_version]|default(
                    bootstrap_package_cache[bootstrap_distribution])|default(
                    bootstrap_package_cache[bootstrap_os_family]) }}"

# Map the right install command, based on gathered bootstrap facts.
bootstrap_install: "{{ _bootstrap_install[bootstrap_distribution ~'_'~ bootstrap_distribution_major_version]|default(
                    _bootstrap_install[bootstrap_distribution])|default(
                    _bootstrap_install[bootstrap_os_family]) }}"

# Map the right set of packages, based on gathered ansible_facts.
bootstrap_facts_packages: "{{ _bootstrap_packages[ansible_distribution ~'_'~ ansible_distribution_major_version]|default(
                           _bootstrap_packages[ansible_distribution])|default(
                           _bootstrap_packages[ansible_os_family]) }}"

# Map the right set of packages, based on gathered ansible_facts.
bootstrap_facts_additional_packages: "{{ additional_bootstrap_packages[ansible_distribution ~'_'~ ansible_distribution_major_version]|default(
                           additional_bootstrap_packages[ansible_distribution])|default(
                           additional_bootstrap_packages[ansible_os_family]) }}"
